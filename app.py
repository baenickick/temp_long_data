# app.py
import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
from datetime import datetime
import io

st.set_page_config(page_title="생활인구 CSV 병합 (지역 선택)", layout="wide")
st.title("생활인구 CSV 병합 웹앱 (서울 전체 지역 선택)")

# 전체 서울 지역 매칭 데이터
region_data = """통계청행정동코드	시도명	시군구명	행정동명
1101053	서울	종로구	사직동
1101054	서울	종로구	삼청동
1101055	서울	종로구	부암동
1101056	서울	종로구	평창동
1101057	서울	종로구	무악동
1101058	서울	종로구	교남동
1101060	서울	종로구	가회동
1101061	서울	종로구	종로1.2.3.4가동
1101063	서울	종로구	종로5.6가동
1101064	서울	종로구	이화동
1101067	서울	종로구	창신1동
1101068	서울	종로구	창신2동
1101069	서울	종로구	창신3동
1101070	서울	종로구	숭인1동
1101071	서울	종로구	숭인2동
1101072	서울	종로구	청운효자동
1101073	서울	종로구	혜화동
1102052	서울	중구	소공동
1102054	서울	중구	회현동
1102055	서울	중구	명동
1102057	서울	중구	필동
1102058	서울	중구	장충동
1102059	서울	중구	광희동
1102060	서울	중구	을지로동
1102065	서울	중구	신당5동
1102067	서울	중구	황학동
1102068	서울	중구	중림동
1102069	서울	중구	신당동
1102070	서울	중구	다산동
1102071	서울	중구	약수동
1102072	서울	중구	청구동
1102073	서울	중구	동화동
1103051	서울	용산구	후암동
1103052	서울	용산구	용산2가동
1103053	서울	용산구	남영동
1103057	서울	용산구	원효로2동
1103058	서울	용산구	효창동
1103059	서울	용산구	용문동
1103063	서울	용산구	이촌1동
1103064	서울	용산구	이촌2동
1103065	서울	용산구	이태원1동
1103066	서울	용산구	이태원2동
1103069	서울	용산구	서빙고동
1103070	서울	용산구	보광동
1103071	서울	용산구	청파동
1103072	서울	용산구	원효로1동
1103073	서울	용산구	한강로동
1103074	서울	용산구	한남동
1104052	서울	성동구	왕십리2동
1104054	서울	성동구	마장동
1104055	서울	성동구	사근동
1104056	서울	성동구	행당1동
1104057	서울	성동구	행당2동
1104058	서울	성동구	응봉동
1104059	서울	성동구	금호1가동
1104062	서울	성동구	금호4가동
1104065	서울	성동구	성수1가1동
1104066	서울	성동구	성수1가2동
1104067	서울	성동구	성수2가1동
1104068	서울	성동구	성수2가3동
1104069	서울	성동구	송정동
1104070	서울	성동구	용답동
1104071	서울	성동구	왕십리도선동
1104072	서울	성동구	금호2.3가동
1104073	서울	성동구	옥수동
1105053	서울	광진구	화양동
1105054	서울	광진구	군자동
1105055	서울	광진구	중곡1동
1105056	서울	광진구	중곡2동
1105057	서울	광진구	중곡3동
1105058	서울	광진구	중곡4동
1105059	서울	광진구	능동
1105060	서울	광진구	구의1동
1105061	서울	광진구	구의2동
1105062	서울	광진구	구의3동
1105063	서울	광진구	광장동
1105064	서울	광진구	자양1동
1105065	서울	광진구	자양2동
1105066	서울	광진구	자양3동
1105067	서울	광진구	자양4동
1106071	서울	동대문구	회기동
1106072	서울	동대문구	휘경1동
1106073	서울	동대문구	휘경2동
1106080	서울	동대문구	청량리동
1106081	서울	동대문구	용신동
1106082	서울	동대문구	제기동
1106083	서울	동대문구	전농1동
1106084	서울	동대문구	전농2동
1106086	서울	동대문구	답십리2동
1106087	서울	동대문구	장안1동
1106088	서울	동대문구	장안2동
1106089	서울	동대문구	이문1동
1106090	서울	동대문구	이문2동
1106091	서울	동대문구	답십리1동
1107052	서울	중랑구	면목2동
1107054	서울	중랑구	면목4동
1107055	서울	중랑구	면목5동
1107057	서울	중랑구	면목7동
1107059	서울	중랑구	상봉1동
1107060	서울	중랑구	상봉2동
1107061	서울	중랑구	중화1동
1107062	서울	중랑구	중화2동
1107064	서울	중랑구	묵1동
1107065	서울	중랑구	묵2동
1107068	서울	중랑구	망우3동
1107069	서울	중랑구	신내1동
1107070	서울	중랑구	신내2동
1107071	서울	중랑구	면목본동
1107072	서울	중랑구	면목3.8동
1107073	서울	중랑구	망우본동
1108058	서울	성북구	돈암1동
1108059	서울	성북구	돈암2동
1108060	서울	성북구	안암동
1108061	서울	성북구	보문동
1108062	서울	성북구	정릉1동
1108063	서울	성북구	정릉2동
1108064	서울	성북구	정릉3동
1108065	서울	성북구	정릉4동
1108066	서울	성북구	길음1동
1108068	서울	성북구	길음2동
1108071	서울	성북구	월곡1동
1108072	서울	성북구	월곡2동
1108076	서울	성북구	장위1동
1108077	서울	성북구	장위2동
1108078	서울	성북구	장위3동
1108081	서울	성북구	성북동
1108082	서울	성북구	삼선동
1108083	서울	성북구	동선동
1108084	서울	성북구	종암동
1108085	서울	성북구	석관동
1109060	서울	강북구	번1동
1109061	서울	강북구	번2동
1109062	서울	강북구	번3동
1109063	서울	강북구	수유1동
1109064	서울	강북구	수유2동
1109065	서울	강북구	수유3동
1109069	서울	강북구	삼양동
1109070	서울	강북구	미아동
1109071	서울	강북구	송중동
1109072	서울	강북구	송천동
1109073	서울	강북구	삼각산동
1109074	서울	강북구	우이동
1109075	서울	강북구	인수동
1110051	서울	도봉구	쌍문1동
1110052	서울	도봉구	쌍문2동
1110053	서울	도봉구	쌍문3동
1110054	서울	도봉구	쌍문4동
1110055	서울	도봉구	방학1동
1110056	서울	도봉구	방학2동
1110057	서울	도봉구	방학3동
1110059	서울	도봉구	창1동
1110060	서울	도봉구	창2동
1110061	서울	도봉구	창3동
1110062	서울	도봉구	창4동
1110063	서울	도봉구	창5동
1110064	서울	도봉구	도봉1동
1110065	서울	도봉구	도봉2동
1111051	서울	노원구	월계1동
1111052	서울	노원구	월계2동
1111053	서울	노원구	월계3동
1111056	서울	노원구	공릉2동
1111058	서울	노원구	하계1동
1111059	서울	노원구	하계2동
1111060	서울	노원구	중계본동
1111061	서울	노원구	중계1동
1111064	서울	노원구	중계4동
1111065	서울	노원구	상계1동
1111066	서울	노원구	상계2동
1111069	서울	노원구	상계5동
1111072	서울	노원구	상계8동
1111073	서울	노원구	상계9동
1111074	서울	노원구	상계10동
1111076	서울	노원구	상계3.4동
1111077	서울	노원구	상계6.7동
1111078	서울	노원구	중계2.3동
1111079	서울	노원구	공릉1동
1112051	서울	은평구	녹번동
1112052	서울	은평구	불광1동
1112055	서울	은평구	갈현1동
1112056	서울	은평구	갈현2동
1112057	서울	은평구	구산동
1112058	서울	은평구	대조동
1112059	서울	은평구	응암1동
1112060	서울	은평구	응암2동
1112065	서울	은평구	신사1동
1112066	서울	은평구	신사2동
1112067	서울	은평구	증산동
1112068	서울	은평구	수색동
1112071	서울	은평구	진관동
1112072	서울	은평구	불광2동
1112073	서울	은평구	응암3동
1112074	서울	은평구	역촌동
1113052	서울	서대문구	천연동
1113062	서울	서대문구	홍제1동
1113064	서울	서대문구	홍제3동
1113065	서울	서대문구	홍제2동
1113066	서울	서대문구	홍은1동
1113068	서울	서대문구	홍은2동
1113069	서울	서대문구	남가좌1동
1113070	서울	서대문구	남가좌2동
1113071	서울	서대문구	북가좌1동
1113072	서울	서대문구	북가좌2동
1113073	서울	서대문구	충현동
1113074	서울	서대문구	북아현동
1113075	서울	서대문구	신촌동
1113076	서울	서대문구	연희동
1114059	서울	마포구	용강동
1114060	서울	마포구	대흥동
1114061	서울	마포구	염리동
1114063	서울	마포구	신수동
1114066	서울	마포구	서교동
1114068	서울	마포구	합정동
1114069	서울	마포구	망원1동
1114070	서울	마포구	망원2동
1114071	서울	마포구	연남동
1114072	서울	마포구	성산1동
1114073	서울	마포구	성산2동
1114074	서울	마포구	상암동
1114075	서울	마포구	도화동
1114076	서울	마포구	서강동
1114077	서울	마포구	공덕동
1114078	서울	마포구	아현동
1115051	서울	양천구	목1동
1115052	서울	양천구	목2동
1115053	서울	양천구	목3동
1115054	서울	양천구	목4동
1115057	서울	양천구	신월1동
1115058	서울	양천구	신월2동
1115059	서울	양천구	신월3동
1115060	서울	양천구	신월4동
1115061	서울	양천구	신월5동
1115062	서울	양천구	신월6동
1115063	서울	양천구	신월7동
1115064	서울	양천구	신정1동
1115065	서울	양천구	신정2동
1115066	서울	양천구	신정3동
1115069	서울	양천구	신정6동
1115070	서울	양천구	신정7동
1115071	서울	양천구	목5동
1115072	서울	양천구	신정4동
1116051	서울	강서구	염창동
1116052	서울	강서구	등촌1동
1116053	서울	강서구	등촌2동
1116054	서울	강서구	등촌3동
1116055	서울	강서구	화곡본동
1116057	서울	강서구	화곡2동
1116058	서울	강서구	화곡3동
1116059	서울	강서구	화곡4동
1116061	서울	강서구	화곡6동
1116063	서울	강서구	화곡8동
1116064	서울	강서구	가양1동
1116065	서울	강서구	가양2동
1116066	서울	강서구	가양3동
1116067	서울	강서구	발산1동
1116069	서울	강서구	공항동
1116070	서울	강서구	방화1동
1116071	서울	강서구	방화2동
1116072	서울	강서구	방화3동
1116073	서울	강서구	화곡1동
1116074	서울	강서구	우장산동
1117051	서울	구로구	신도림동
1117052	서울	구로구	구로1동
1117054	서울	구로구	구로3동
1117055	서울	구로구	구로4동
1117056	서울	구로구	구로5동
1117061	서울	구로구	고척1동
1117062	서울	구로구	고척2동
1117064	서울	구로구	개봉2동
1117065	서울	구로구	개봉3동
1117067	서울	구로구	오류1동
1117068	서울	구로구	오류2동
1117069	서울	구로구	수궁동
1117070	서울	구로구	가리봉동
1117071	서울	구로구	구로2동
1117072	서울	구로구	개봉1동
1118051	서울	금천구	가산동
1118052	서울	금천구	독산1동
1118053	서울	금천구	독산2동
1118054	서울	금천구	독산3동
1118055	서울	금천구	독산4동
1118057	서울	금천구	시흥1동
1118058	서울	금천구	시흥2동
1118059	서울	금천구	시흥3동
1118060	서울	금천구	시흥4동
1118061	서울	금천구	시흥5동
1119054	서울	영등포구	여의동
1119055	서울	영등포구	당산1동
1119056	서울	영등포구	당산2동
1119061	서울	영등포구	양평1동
1119062	서울	영등포구	양평2동
1119063	서울	영등포구	신길1동
1119065	서울	영등포구	신길3동
1119066	서울	영등포구	신길4동
1119067	서울	영등포구	신길5동
1119068	서울	영등포구	신길6동
1119069	서울	영등포구	신길7동
1119070	서울	영등포구	대림1동
1119071	서울	영등포구	대림2동
1119072	서울	영등포구	대림3동
1119073	서울	영등포구	영등포본동
1119074	서울	영등포구	영등포동
1119075	서울	영등포구	도림동
1119076	서울	영등포구	문래동
1120052	서울	동작구	노량진2동
1120053	서울	동작구	상도1동
1120054	서울	동작구	상도2동
1120055	서울	동작구	상도3동
1120056	서울	동작구	상도4동
1120063	서울	동작구	사당1동
1120065	서울	동작구	사당3동
1120066	서울	동작구	사당4동
1120067	서울	동작구	사당5동
1120068	서울	동작구	대방동
1120069	서울	동작구	신대방1동
1120070	서울	동작구	신대방2동
1120071	서울	동작구	흑석동
1120072	서울	동작구	노량진1동
1120073	서울	동작구	사당2동
1121052	서울	관악구	보라매동
1121054	서울	관악구	청림동
1121057	서울	관악구	행운동
1121058	서울	관악구	낙성대동
1121061	서울	관악구	중앙동
1121062	서울	관악구	인헌동
1121063	서울	관악구	남현동
1121064	서울	관악구	서원동
1121065	서울	관악구	신원동
1121066	서울	관악구	서림동
1121068	서울	관악구	신사동
1121069	서울	관악구	신림동
1121071	서울	관악구	난향동
1121072	서울	관악구	조원동
1121073	서울	관악구	대학동
1121078	서울	관악구	은천동
1121079	서울	관악구	성현동
1121080	서울	관악구	청룡동
1121081	서울	관악구	난곡동
1121082	서울	관악구	삼성동
1121083	서울	관악구	미성동
1122051	서울	서초구	서초1동
1122052	서울	서초구	서초2동
1122053	서울	서초구	서초3동
1122054	서울	서초구	서초4동
1122055	서울	서초구	잠원동
1122056	서울	서초구	반포본동
1122057	서울	서초구	반포1동
1122058	서울	서초구	반포2동
1122059	서울	서초구	반포3동
1122060	서울	서초구	반포4동
1122061	서울	서초구	방배본동
1122062	서울	서초구	방배1동
1122063	서울	서초구	방배2동
1122064	서울	서초구	방배3동
1122065	서울	서초구	방배4동
1122066	서울	서초구	양재1동
1122067	서울	서초구	양재2동
1122068	서울	서초구	내곡동
1123051	서울	강남구	신사동
1123052	서울	강남구	논현1동
1123053	서울	강남구	논현2동
1123058	서울	강남구	삼성1동
1123059	서울	강남구	삼성2동
1123060	서울	강남구	대치1동
1123063	서울	강남구	대치4동
1123064	서울	강남구	역삼1동
1123065	서울	강남구	역삼2동
1123066	서울	강남구	도곡1동
1123067	서울	강남구	도곡2동
1123068	서울	강남구	개포1동
1123071	서울	강남구	개포4동
1123072	서울	강남구	일원본동
1123073	서울	강남구	일원1동
1123074	서울	강남구	일원2동
1123075	서울	강남구	수서동
1123076	서울	강남구	세곡동
1123077	서울	강남구	압구정동
1123078	서울	강남구	청담동
1123079	서울	강남구	대치2동
1123080	서울	강남구	개포2동
1124051	서울	송파구	풍납1동
1124052	서울	송파구	풍납2동
1124053	서울	송파구	거여1동
1124054	서울	송파구	거여2동
1124055	서울	송파구	마천1동
1124056	서울	송파구	마천2동
1124057	서울	송파구	방이1동
1124058	서울	송파구	방이2동
1124059	서울	송파구	오륜동
1124060	서울	송파구	오금동
1124061	서울	송파구	송파1동
1124062	서울	송파구	송파2동
1124063	서울	송파구	석촌동
1124064	서울	송파구	삼전동
1124065	서울	송파구	가락본동
1124066	서울	송파구	가락1동
1124067	서울	송파구	가락2동
1124068	서울	송파구	문정1동
1124069	서울	송파구	문정2동
1124071	서울	송파구	잠실본동
1124075	서울	송파구	잠실4동
1124077	서울	송파구	잠실6동
1124078	서울	송파구	잠실7동
1124079	서울	송파구	잠실2동
1124080	서울	송파구	잠실3동
1124081	서울	송파구	장지동
1124082	서울	송파구	위례동
1125051	서울	강동구	강일동
1125052	서울	강동구	상일동
1125053	서울	강동구	명일1동
1125054	서울	강동구	명일2동
1125055	서울	강동구	고덕1동
1125056	서울	강동구	고덕2동
1125058	서울	강동구	암사2동
1125059	서울	강동구	암사3동
1125061	서울	강동구	천호1동
1125063	서울	강동구	천호3동
1125065	서울	강동구	성내1동
1125066	서울	강동구	성내2동
1125067	서울	강동구	성내3동
1125070	서울	강동구	둔촌1동
1125071	서울	강동구	둔촌2동
1125072	서울	강동구	암사1동
1125073	서울	강동구	천호2동
1125074	서울	강동구	길동"""

def load_region_mapping():
    """지역 매핑 데이터를 로드하여 DataFrame으로 변환"""
    lines = region_data.strip().split('\n')[1:]  # 헤더 제외
    data = []
    for line in lines:
        parts = line.split('\t')
        if len(parts) >= 4:
            data.append({
                '코드': parts[0],
                '시도': parts[1],
                '시군구': parts[2], 
                '행정동': parts[3],
                '코드7자리': parts[0][:7]
            })
    return pd.DataFrame(data)

def detect_delimiter(sample_bytes):
    s = sample_bytes[:2048].decode('utf-8', errors='ignore')
    return '\t' if s.count('\t') > s.count(',') else ','

def process_file(content_bytes, filename, selected_codes):
    delim = detect_delimiter(content_bytes)
    df = None
    for enc in ('utf-8', 'utf-8-sig', 'cp949', 'euc-kr'):
        try:
            df = pd.read_csv(
                io.BytesIO(content_bytes),
                encoding=enc,
                delimiter=delim,
                low_memory=False,
                dtype=str
            )
            break
        except:
            continue
    if df is None:
        raise ValueError(f"{filename}: 인코딩 실패")
    
    df.columns = df.columns.str.strip().str.replace('"','').str.replace('?','')
    required = [
        '기준일ID','시간대구분','집계구코드',
        '총생활인구수','중국인체류인구수','중국외외국인체류인구수'
    ]
    if not all(c in df.columns for c in required):
        missing = [c for c in required if c not in df.columns]
        raise ValueError(f"{filename}: 필수 컬럼 누락 - {missing}")
    
    df = df[required].copy()
    df['집계구코드_str'] = df['집계구코드'].astype(str)
    
    # 선택된 지역의 7자리 코드로 필터링
    mask = df['집계구코드_str'].str[:7].isin(selected_codes)
    df = df[mask].copy()
    
    if df.empty:
        return pd.DataFrame()
    
    df['DATE'] = pd.to_datetime(df['기준일ID'], format='%Y%m%d', errors='coerce')
    df['TIME'] = pd.to_numeric(df['시간대구분'], errors='coerce')
    wmap = {0:'월요일',1:'화요일',2:'수요일',3:'목요일',4:'금요일',5:'토요일',6:'일요일'}
    df['요일'] = df['DATE'].dt.dayofweek.map(wmap)
    df['주중_or_주말'] = np.where(df['DATE'].dt.dayofweek >= 5, '주말', '주중')
    df['CODE'] = df['집계구코드_str']
    
    return pd.DataFrame({
        'DATE': df['DATE'].dt.strftime('%Y-%m-%d'),
        '요일': df['요일'],
        '주중_or_주말': df['주중_or_주말'],
        'TIME': df['TIME'],
        'CODE': df['CODE'],
        'ALL': pd.to_numeric(df['총생활인구수'], errors='coerce'),
        'CHN': pd.to_numeric(df['중국인체류인구수'], errors='coerce'),
        'EXP_CHN': pd.to_numeric(df['중국외외국인체류인구수'], errors='coerce')
    }).dropna(subset=['DATE','TIME','CODE'])

# 지역 매핑 데이터 로드
region_df = load_region_mapping()

# 드롭다운 지역 선택 UI
st.header("📍 서울 지역 선택")
st.info(f"📊 전체 {len(region_df)} 개 행정동 데이터 포함 (서울 25개 구 전체)")

# 시군구 목록 가져오기
districts = sorted(region_df['시군구'].unique())

col1, col2 = st.columns([1, 2])

with col1:
    selected_district = st.selectbox(
        "🏢 시군구 선택",
        ["선택하세요..."] + districts
    )

# 선택된 구에 해당하는 동 목록
available_dongs = []
if selected_district != "선택하세요...":
    available_dongs = sorted(region_df[region_df['시군구'] == selected_district]['행정동'].tolist())

with col2:
    if available_dongs:
        selected_dongs = st.multiselect(
            f"🏘️ {selected_district} 행정동 선택 (여러 개 선택 가능)",
            available_dongs
        )
    else:
        st.selectbox(
            "🏘️ 행정동 선택",
            ["먼저 시군구를 선택하세요..."],
            disabled=True
        )

# 선택된 지역 처리
selected_regions = []
selected_codes = []

if selected_district != "선택하세요..." and 'selected_dongs' in locals() and selected_dongs:
    for dong in selected_dongs:
        code_7 = region_df[
            (region_df['시군구'] == selected_district) & 
            (region_df['행정동'] == dong)
        ]['코드7자리'].iloc[0]
        
        selected_regions.append({
            'district': selected_district,
            'dong': dong,
            'code': code_7
        })
        selected_codes.append(code_7)

# 선택된 지역 표시
if selected_regions:
    st.success(f"✅ 선택된 지역: {len(selected_regions)}개")
    
    # 선택된 지역을 4컬럼으로 표시
    cols = st.columns(4)
    for idx, region in enumerate(selected_regions):
        col_idx = idx % 4
        with cols[col_idx]:
            st.write(f"📍 **{region['district']}** {region['dong']}")
    
    st.markdown("---")
    
    # 파일 업로드
    uploaded = st.file_uploader(
        "외국인 생활인구 CSV 파일 업로드 (여러 개 가능)", 
        type='csv', 
        accept_multiple_files=True
    )

    if uploaded:
        files_dict = {f.name: f.read() for f in uploaded}
        
        st.subheader("첫 번째 파일 5행 미리보기")
        first_name = list(files_dict)[0]
        sample = files_dict[first_name]
        delim = detect_delimiter(sample)
        for enc in ('utf-8','utf-8-sig','cp949','euc-kr'):
            try:
                df0 = pd.read_csv(io.BytesIO(sample), encoding=enc, delimiter=delim, nrows=5)
                df0.columns = df0.columns.str.strip().str.replace('"','').str.replace('?','')
                st.dataframe(df0)
                break
            except:
                continue

        st.markdown("---")
        
        if st.button("🚀 선택된 지역으로 필터링 실행"):
            progress = st.progress(0)
            dfs, errors = [], []
            total = len(files_dict)
            
            for i, (fname, content) in enumerate(files_dict.items(), start=1):
                try:
                    dfp = process_file(content, fname, selected_codes)
                    if not dfp.empty:
                        dfs.append(dfp)
                        st.write(f"✓ {fname}: {len(dfp):,}행")
                    else:
                        st.write(f"○ {fname}: 0행")
                except Exception as e:
                    errors.append(str(e))
                    st.write(f"✗ {fname}: {e}")
                progress.progress(i / total)
            
            if dfs:
                merged = pd.concat(dfs, ignore_index=True).drop_duplicates()
                merged['DATE'] = pd.Categorical(merged['DATE'])
                merged = merged.sort_values(['DATE','TIME','CODE']).reset_index(drop=True)
                st.success(f"🎉 병합 완료: 총 {len(merged):,}행")
                
                # 포함된 지역 코드 표시
                unique_codes = merged['CODE'].str[:7].unique()
                matched_regions = []
                for code in unique_codes:
                    matches = region_df[region_df['코드7자리'] == code]
                    if not matches.empty:
                        matched_regions.append(f"{matches.iloc[0]['시군구']} {matches.iloc[0]['행정동']}")
                
                if matched_regions:
                    st.info(f"📊 최종 포함된 지역: {', '.join(matched_regions)}")
                
                bio = BytesIO()
                merged.to_excel(bio, index=False, engine='openpyxl')
                bio.seek(0)
                data = bio.getvalue()
                fn = f"seoul_regions_{datetime.now():%Y%m%d_%H%M%S}.xlsx"
                st.download_button(
                    "📥 선택된 지역 엑셀 다운로드",
                    data=data,
                    file_name=fn,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            if errors:
                st.error("❌ 오류 발생:")
                for e in errors:
                    st.write("-", e)
else:
    st.info("💡 **사용 방법:**")
    st.write("1. 🏢 **시군구 선택**: 25개 구 중 원하는 구를 선택하세요")
    st.write("2. 🏘️ **행정동 선택**: 해당 구의 행정동을 여러 개 선택 가능합니다")
    st.write("3. 📁 **파일 업로드**: CSV 파일을 업로드하고 분석을 실행하세요")
    
    # 구별 행정동 수 요약
    district_summary = region_df.groupby('시군구').size().reset_index(name='행정동수')
    st.subheader("📊 구별 행정동 현황")
    
    cols = st.columns(5)
    for idx, row in district_summary.iterrows():
        col_idx = idx % 5
        with cols[col_idx]:
            st.metric(f"{row['시군구']}", f"{row['행정동수']}개")
